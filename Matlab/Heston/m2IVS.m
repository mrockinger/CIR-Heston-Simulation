function X = m2IVS(kappa, theta, sigma, Delta, z)
 
z2 = z^2;
  
D2 = Delta^2;
  
s2 = sigma^2;
s4 = sigma^4;
  
k2 = kappa^2;
k3 = kappa^3;
k4 = kappa^4;
  
ekt = exp(kappa * Delta);
sekt = sqrt(ekt);
ekt2 = ekt^2;
ekt3 = ekt^3;
ekt4 = ekt^4;
thekt = ekt^(3/2);
fhekt = ekt^(5/2);
shekt = ekt^(7/2);
  
Feller = 2 * kappa * theta / s2;
Arg = (4*sekt*kappa*z)/((-1 + ekt)*s2);
  
B1 = besseli(Feller + 1, Arg);
BM1 = besseli(Feller - 1, Arg);
BM2 = besseli(Feller - 2, Arg);
  
  
 X =  ...
  (2*sekt*kappa*z*((-1 + ekt)*(4 + 10*Delta*kappa + 3*D2*k2 + ekt2*(4 - 10*Delta*kappa + 3*D2*k2) + ...
                                 2*ekt*(-4 + 5*D2*k2))*s2 - ...
                     8*kappa*(2 + Delta*kappa + ekt3*(2 - Delta*kappa) + ekt2*(-2 - 5*Delta*kappa + 2*D2*k2) + ...
                                ekt*(-2 + 5*Delta*kappa + 2*D2*k2))*z)*besseli(Feller, Arg) + ...
      4*ekt*k2* (2 + Delta*kappa + ekt*(-2 + Delta*kappa))^2*z2* ...
      besseli(-3 + Feller, Arg) - ...
      8*sekt*kappa*s2*z*BM2 + ...
      24*thekt*kappa*s2*z*BM2 - ...
      24*fhekt*kappa*s2*z*BM2 + ...
      8*shekt*kappa*s2*z*BM2 - ...
      20*Delta*sekt*k2*s2*z*BM2 + ...
      20*Delta*thekt*k2*s2*z*BM2 + ...
      20*Delta*fhekt*k2*s2*z*BM2 - ...
      20*Delta*shekt*k2*s2*z*BM2 - ...
      6*D2*sekt*k3*s2*z*BM2 - ...
      14*D2*thekt*k3*s2*z*BM2 + ...
      14*D2*fhekt*k3*s2*z*BM2 + ...
      6*D2*shekt*k3*s2*z*BM2 - ...
      32*sekt*k2*z2*BM2 + ...
      32*thekt*k2*z2*BM2 + ...
      32*fhekt*k2*z2*BM2 - ...
      32*shekt*k2*z2*BM2 - ...
      16*Delta*sekt*k3*z2*BM2 - ...
      80*Delta*thekt*k3*z2*BM2 + ...
      80*Delta*fhekt*k3*z2*BM2 + ...
      16*Delta*shekt*k3*z2*BM2 - ...
      32*D2*thekt*k4*z2*BM2 - ...
      32*D2*fhekt*k4*z2*BM2 - ...
      4*s4*BM1 + ... 
      16*ekt*s4*BM1 - ...
      24*ekt2*s4*BM1 + ...
      16*ekt3*s4*BM1 - ...
      4*ekt4*s4*BM1 + ...
      2*Delta*kappa*s4*BM1 - ...
      4*Delta*ekt*kappa*s4*BM1 + ...
      4*Delta*ekt3*kappa*s4*BM1 - ...
      2*Delta*ekt4*kappa*s4*BM1 + ... 
      D2*k2*s4*BM1 + ...
      4*D2*ekt*k2*s4*BM1 - ...
      10*D2*ekt2*k2*s4*BM1 + ...
      4*D2*ekt3*k2*s4*BM1 + ...
      D2*ekt4*k2*s4*BM1 + ...
      8*kappa*s2*z*BM1 - ...
      16*ekt*kappa*s2*z*BM1 + ...
      16*ekt3*kappa*s2*z*BM1 - ...
      8*ekt4*kappa*s2*z*BM1 + ...
      8*Delta*k2*s2*z*BM1 + ...
      48*Delta*ekt*k2*s2*z*BM1 - ...
      112*Delta*ekt2*k2*s2*z*BM1 + ...
      48*Delta*ekt3*k2*s2*z*BM1 + ...
      8*Delta*ekt4*k2*s2*z*BM1 + ...
      32*D2*ekt*k3*s2*z*BM1 - ...
      32*D2*ekt3*k3*s2*z*BM1 + ...
      16*k2*z2*BM1 + ...
      32*ekt*k2*z2*BM1 - ...
      96*ekt2*k2*z2*BM1 + ...
      32*ekt3*k2*z2*BM1 + ...
      16*ekt4*k2*z2*BM1 + ...
      96*Delta*ekt*k3*z2*BM1 - ...
      96*Delta*ekt3*k3*z2*BM1 + ...
      8*D2*ekt*k4*z2*BM1 + ...
      80*D2*ekt2*k4*z2*BM1 + ...
      8*D2*ekt3*k4*z2*BM1 + ...
      16*ekt*k2*z2*B1 - ...
      32*ekt2*k2*z2*B1 + ...
      16*ekt3*k2*z2*B1 + ...
      16*Delta*ekt*k3*z2*B1 - ...
      16*Delta*ekt3*k3*z2*B1 + ...
      4*D2*ekt*k4*z2*B1 + ...
      8*D2*ekt2*k4*z2*B1 + ...
      4*D2*ekt3*k4*z2*B1)/(4.* (-1 + ekt)^4*k4*BM1);
